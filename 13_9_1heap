http://www.careercup.com/question?id=3652797


you are given 2 arrays sorted in decreasing order of size m and n respectively. 

Input: a number k <= n*n and >= 1 

Output: the kth largest sum(a+b) possible. where 
a (any element from array 1) 
b (any element from array 2) 

The Brute force approach will take O(n*n). can anyone find a better logic. thnkx in advance.


Here is my solution. Basically you would maintain a max-heap such that when you consider a[i] + b[j] as the (c - 1)th sum, you insert a[i + 1] + b[j] and a[i] + b[j + 1] (if not out of border) to the heap. And then take the top element of the heap as the cth sum. Obviously this process should start from a[0] + b[0]. 

The complexity is O(klgn) for heap insertion and deletion of the top consumes O(lgn). 

Please correct me if I am wrong. thx
