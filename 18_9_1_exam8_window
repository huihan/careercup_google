http://www.careercup.com/question?id=248673

Given a document and a query of K words, how do
u find the smallest window that covers all the 
words at least once in that document? (given you
know the inverted lists of all K words, that is, 
for each word, you have a list of all its occurrrences).
This one is really hard. Could someone propose an algorithm in O(n)?


public class Solution{
  
    public int smallWindow(ArrayList<ListNode<Integer>> arr){
        Comparator<ListNode> com  = new Comparator<ListNode>() {
            @Override
            public int compare(ListNode n1 , ListNode n2)
            {
                if(n1.val < n2.val) return -1;
                if(n1.val > n2.val ) return 1;
                return 0;
            }
        };
        PriorityQueue<ListNode> qe = new PriorityQueue<ListNode>(arr.size(),com);
        int max = 0 , window_len = Integer.MAX_VALUE;
        for(ListNode a : arr){
          qe.offer(a);
          max = Math.max(a.val , max);
        }
        while( qe.peek().next !=null ){
          ListNode min_node = qe.poll();
          window_len = Math.min(window_len, max - min_node.val);
          qe.offer(min_node.next);
          max = Math.max(min_node.next.val , max);
        }
        return window_len;
    }
}
