http://www.careercup.com/question?id=12994675
There is a matrix, m x n. Several groups of people locate at some certain spots. In the following example, there are three groups and the number 4 indicates there are four people in this group. Now we want to find a meeting point in the matrix so that the cost of all groups moving to that point is the minimum. As for how to compute the cost of moving one group to another point, please see the following example. 

Group1: (0, 1), 4 

Group2: (1, 3), 3 

Group3: (2, 0), 5 

. 4 . . 

. . . 3 

5 . . . 

If all of these three groups moving to (1, 1), the cost is: 4*((1-0)+(1-1)) + 5*((2-1)+(1-0))+3*((1-1)+(3-1)) 

My idea is : 

Firstly, this two dimensional problem can be reduced to two one dimensional problem. In the one dimensional problem, I can prove that the best spot must be one of these groups. In this way, I can give a O(G^2) algorithm.(G is the number of group). 

Use iterator's example for illustration: 

{(-100,0,100),(100,0,100),(0,1,1)},(x,y,population) 

for x, {(-100,100),(100,100),(0,1)}, 0 is the best. 

for y, {(0,100),(0,100),(1,1)}, 0 is the best. 

So it's (0, 0) 

Is there any better solution for this problem. 

Thanks,


public int[] min(int[][] a)
        {
                int total = 0;
                int weightX = 0;
                int weightY = 0;
                int m = a.length;
                int n = a[0].length;
                for(int i = 0; i < m; i++) {
                        for(int j = 0; j < n; j++) {
                                total += a[i][j];
                                weightX += a[i][j] * j;
                                weightY += a[i][j] * i;
                        }
                }
                int x = Math.round(weightX / total);
                int y = Math.round(weightY / total);
                return new int[] {x, y};
        }

